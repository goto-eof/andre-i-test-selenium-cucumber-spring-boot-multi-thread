plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.andreidodu'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.seleniumhq.selenium:selenium-java:4.23.0'
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0-M2'
    //testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.0-M2'
    //testImplementation 'org.junit.platform:junit-platform-launcher:1.11.0-M2'
    //testImplementation 'org.junit.platform:junit-platform-suite-api:1.11.0-M2'

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.seleniumhq.selenium:selenium-java:4.23.0'

    implementation 'io.cucumber:cucumber-java:7.18.1'
    implementation 'io.cucumber:cucumber-spring:7.18.1'
    testImplementation 'io.cucumber:cucumber-junit:7.18.1'
    testImplementation 'org.testng:testng:7.10.2'
    implementation 'io.cucumber:cucumber-testng:7.18.1'
}

/*
tasks.register('cucumber', Test) {
    testLogging {
        exceptionFormat "full" // default is "short"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
    useTestNG() {
        testClassesDirs = testing.suites.test.sources.output.classesDirs
        classpath = testing.suites.test.sources.runtimeClasspath
        suiteXmlFiles << new File(rootDir, "/src/test/resources/testng.xml")
        listeners << 'org.testng.reporters.XMLReporter:generateTestResultAttributes=true,generateGroupsAttribute=true'
    }
    description = "Execute cucumber BDD tests."
    group = "verification"

}
*/
/*
test {
    useTestNG {
        preserveOrder true
    }
}
*/

test {
    useTestNG() {
        // includeGroups System.getProperty("groups", "cucumber")
    }
    systemProperties(System.properties)
    scanForTestClasses = false
    testLogging.showStandardStreams = true
}